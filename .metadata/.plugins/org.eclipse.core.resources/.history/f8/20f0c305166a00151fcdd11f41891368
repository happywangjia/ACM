package learning;

public class learn_6 {
	private static final int n=5;
	private static final double[] p={-1,0.15,0.1,0.05,0.1,0.2};
	private static final double[] q={0.05,0.1,0.05,0.05,0.05,0.1};
	private static int root[][]=new int[n+1][n+1];
	private static double[][] w=new double[n+2][n+2];
	private static double[][] e=new double[n+2][n+2];
	
	public static void main(String[] args){
		optimalBST(p,q,n);
		printRoot();
		printOptimalBST(1, n, -1);
	
	}
	private static void optimalBST(double[] p2,double[] q2,int n){
		for(int i=1;i<=n+1;i++){
			e[i][i-1]=q[i-1];
			w[i][i-1]=q[i-1];
		}
		for(int len=1;len<=n;len++){
			for(int i=1;i<=n-len+1;i++){
				int j=i+len-1;
				e[i][j]=Double.MAX_VALUE;
//				System.out.println(i+":"+j);
				w[i][j]=w[i][j-1]+p[j]+q[j];
				for(int k=i;k<=j;k++){
					double temp=e[i][k-1]+e[k+1][j]+w[i][j];
					if(temp<e[i][j]){
						e[i][j]=temp;
						root[i][j]=k;
					}
				}
			}
		}
	}
	private static void printRoot(){
		System.out.println("各子树的根：");
		for(int i=1;i<=n;i++){
			for(int j=1;j<=n;j++){
				if(j>=i)
				System.out.println(i+":"+j+" "+root[i][j]+" ");
			}
		}
	}
	private static void printOptimalBST(int i,int j,int r){
		int rootChild=root[i][j];
		if(rootChild==root[1][n]){
			System.out.println(rootChild+"is root");
			printOptimalBST(i, rootChild-1, rootChild);
			printOptimalBST(rootChild+1,j , rootChild);
			return;
		}
		if(j<i-1) return;
		else if(j==i-1){
			if(j<r){
				System.out.println(j+"是"+r+"的左孩子");
			}else{
				System.out.println(j+"是"+r+"的右孩子");
			}
			return;
		}else{
			if(rootChild<r){
				if(rootChild<r){
					System.out.println(rootChild+"是"+r+"的左孩子");
				}else{
					System.out.println(rootChild+"是"+r+"的右孩子");
				}
				printOptimalBST(i, rootChild-1, rootChild);
				printOptimalBST(rootChild+1,j , rootChild);
			}
		}
		
	}
	
}
