package learning.bianyi3;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

public class ByThree {
	private static HashMap<String, tokClass> map = new HashMap<String, tokClass>();
	private static final String tokFile = "tok.txt";
	private static final String sourceFile="Simple.txt";
	private static final String tt1="tt1.txt";
	private static final String tt2="tt2.txt";
	public static void main(String[] args){
		init();
		du();
	}
	private static void du(){
		FileReader fr = null;
		BufferedReader br = null;
		FileWriter fr1=null;
		BufferedWriter br1=null;
		FileWriter fr2=null;
		BufferedWriter br2=null;
		try {
			File file = new File(sourceFile);
			fr = new FileReader(file);
			br = new BufferedReader(fr);
			String line=null;
			int hanshu=0;
			/**
			 * flag:
			 * 1：整数
			 * 2：字符常数
			 * 3：标识符
			 * 4:关键字
			 * 5：注释
			 * 6：除号
			 * 7：界符
			 * 8:运算符
			 */
			File file1=new File(tt1);
			fr1=new FileWriter(file1);
			br1=new BufferedWriter(fr1);
			File file2=new File(tt2);
			fr2=new FileWriter(file2);
			br2=new BufferedWriter(fr2);
			while((line=br.readLine())!=null){
				hanshu++;
				String[] str=line.split(" ");
				for(int i=0;i<str.length;i++){
					int flag=-1;
					if(str[i].length()==0) continue;
					if(isDig(str[i].charAt(0))){
						flag=1;
					}
					else if(str[i].charAt(0)=='\''){
						flag=2;
					}else if(map.containsKey(str[i])){
						int tmp=map.get(str[i]).getLei();
						if(tmp==1){
							flag=4;
						}else if(tmp==3){
							flag=7;
						}else if(tmp==2){
							flag=8;
						}
					}
					if(str[i].charAt(0)=='/'){
						if(str[i].length()==2) flag=4;
						else flag=5;
					}
					if(flag==-1) flag=3;
					switch(flag){
					case 1:
						br2.write(hanshu+"  "+str[i]+" "+str[i].length()+"整数");
						break;
					case 2:
						br2.write(hanshu+"  "+str[i]+" "+str[i].length()+"字符常数");
						break;
					case 3:
						br2.write(hanshu+"  "+str[i]+" "+str[i].length()+"标识符");
						break;
					case 4:
						br2.write(hanshu+"  "+str[i]+" "+str[i].length()+"关键字");
						break;
					case 5:
						br2.write(hanshu+"  "+str[i]+" "+str[i].length()+"注释");
						break;
					case 6:
						br2.write(hanshu+"  "+str[i]+" "+str[i].length()+"除号");
						break;
					case 7:
						br2.write(hanshu+"  "+str[i]+" "+str[i].length()+"界符");
						break;
					case 8:
						br2.write(hanshu+"  "+str[i]+" "+str[i].length()+"运算符");
						break;
					}
					br2.flush();
					
				}
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fr != null) {
				try {
					fr.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	private static boolean isDig(char ch){
		if(ch<'9'&&ch>'0') return true;
		return false;
	}
	public static void init(){
		FileReader fr = null;
		BufferedReader br = null;
		try {
			File file = new File(tokFile);
			fr = new FileReader(file);
			br = new BufferedReader(fr);
			for (int i = 1; i < 57; i++) {
				tokClass tok = new tokClass();
				String str = br.readLine();
				int pri = getPri(i);
				String[] name=str.split("\t");
				tok.setLei(pri);
				tok.setToke(Integer.parseInt(name[1]));
				map.put(name[0], tok);
				System.out.println(pri+" "+name[0]+" "+name[1]);
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fr != null) {
				try {
					fr.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	private static int getPri(int k) {
		if (k <= 29)
			return 1;
		else if (k <= 41)
			return 2;
		else if (k <= 51)
			return 3;
		else if (k <= 55)
			return 4;
		else if (k <= 56)
			return 5;
		else
			return -1;
	}

}
