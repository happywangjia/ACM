package learning.rzh1;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Stack;

public class rzh1 {
	private static Scanner cin = new Scanner(System.in);
	private static Stack<Integer> stack = new Stack<Integer>();
	private static HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

	public static void main(String[] args) {
		init();
		int n;
		while (cin.hasNext()) {
			n = cin.nextInt();
			switch (n) {
			case 1:
				find(1);
				break;
			case 2:
				break;
			case 3:
				break;
			default:
				return;
			}
		}
	}

	private static void find(int flag) {
		stack.clear();
		stack.push(1);
		int tmp = 1;
		switch (flag) {
		case 1:
			dfs1(tmp);
			break;
		case 2:
			break;
		case 3:
			break;
		}

	}

	public static void dfs1(int tmp) {
		if (tmp >= 5)
			return;
		for (int i = 2; i <= 5; i++) {
			if (stack.contains(i))
				continue;
			if (i == 2) {
				stack.push(i);
				print();
				stack.pop();
				continue;
			}
			tmp++;
			stack.push(i);
			dfs1(tmp);
//			System.out.println("tmp:"+tmp);
			while(stack.size()>=tmp){
				stack.pop();
			}
		}
	}

//	1  2 1165
//	1  3 2 5121
//	1  3 4 2 6081
//	1  3 4 5 2 9107
//	1  3 5 2 6835
//	1  3 5 4 2 7431
//	1  4 2 2973
//	1  4 3 2 7367
//	1  4 3 5 2 9081
//	1  4 3 5 2 9081
//	1  4 5 2 5999
//	1  4 5 3 2 8717

	private static void print() {
		Iterator<Integer> iterator = stack.iterator();
		int sum = 0;
		int k1 = iterator.next();
		System.out.print(k1 + "  ");
		int k2;
		while (iterator.hasNext()) {
			k2 = iterator.next();
			System.out.print(k2 + " ");
			int t1 = k1;
			int t2 = k2;
			if (t1 > t2) {
				int yy = t1;
				t1 = t2;
				t2 = yy;
			}
			sum += map.get(t1 * 10 + t2);
			k1 = k2;
		}
		System.out.println(sum);
	}

	private static void init() {
		map.put(12, 1165);
		map.put(13, 1942);
		map.put(14, 1511);
		map.put(15, 2129);
		map.put(23, 3179);
		map.put(24, 1462);
		map.put(25, 2677);
		map.put(34, 2677);
		map.put(35, 2216);
		map.put(45, 1811);
	}

}
