package algorithms;

/**
 * 
 * @tag:堆排序
 * @link:
 * @Num:N_005.java
 * @author hijj
 * Create at: 2015年9月18日 下午12:07:32
 * 注：本例是从1开始，当有其他需求的时候可以通过start设置，步骤相对复杂
 */
public class N_005 {
	private static final int maxn=20;
	
	public static void main(String[] args){
		int[] nums=new int[maxn+1];
		for(int i=1;i<=maxn;i++)
			nums[i]=(int) Math.floor(Math.random()*100);
		for(int i=0;i<=maxn;i++){
			System.out.print(nums[i]);
		}
		System.out.println();
		heapSort(nums);
		for(int i=1;i<6;i++){
			System.out.println(nums[i]);
			int temp=nums[1];
			nums[1]=nums[nums.length-i];
			maxHeap(nums,1);
		}
		
	}	
	
	private static void heapSort(int[] nums){
		int end=nums.length-1;
		int middle=end/2;
		for(int i=middle;i>=i;i--){
			maxHeap(nums,i);
		}
	}
	private static void maxHeap(int[] nums,int middle){
		int left=middle*2;
		int right=middle*2+1;
		int length=nums.length-1;
		int large=middle;
		if(left<=length&&nums[left]>nums[middle]){
			large=left;
		}
		if(right<=length&&nums[right]>nums[middle]){
			large=right;
		}
		if(large!=middle){
			int temp=nums[large];
			nums[large]=nums[middle];
			nums[middle]=temp;
			maxHeap(nums,large);
		}
		
	}
}
