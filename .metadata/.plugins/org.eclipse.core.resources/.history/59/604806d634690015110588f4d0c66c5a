package algorithms.tree;

import java.util.Scanner;

/**
 * 
 * @tag:线段树－－单点更新
 * @link:http://acm.hdu.edu.cn/showproblem.php?pid=1166
 * @Num:Hdu1166.java
 * @author hijj Create at: 2015年10月3日 上午1:44:19
 */
public class Hdu1166 {
	private static Scanner cin = new Scanner(System.in);
	private static final int maxn = 55555;
	private static int[] sum = new int[maxn << 2];

	public static void main(String[] args) {
		int T, n;
		T = cin.nextInt();
		for (int cas = 1; cas <= T; cas++) {
			toZero();
			System.out.println("Case " + cas + ":");
			n = cin.nextInt();
			build(1, n, 1);
			String op;
			while (cin.hasNext()) {
				op = cin.next();
				if (op.charAt(0) == 'E')
					break;
				int a = cin.nextInt();
				int b = cin.nextInt();
				if (op.charAt(0) == 'Q') {
					System.out.println(query(a, b, 1, n, 1));
				} else if (op.charAt(0) == 'S') {
					update(a, -b, 1, n, 1);
				} else if(op.charAt(0)=='A'){
					update(a, b, 1, n, 1);
				}
			}
		}
	}

	private static void build(int l, int r, int rt) {
		if (l == r) {
			sum[rt] = cin.nextInt();
			return;
		}
		int m = (l + r) >> 1;
		build(l, m, rt << 1);
		build(m + 1, r, rt << 1 | 1);
		pushUp(rt);
	}

	private static void pushUp(int rt) {
		sum[rt] = sum[rt << 1] + sum[rt << 1 | 1];
	}

	/**
	 * 区间求和
	 * 
	 * @param L
	 * @param R
	 * @param l
	 * @param r
	 * @param rt
	 * @return
	 */
	private static int query(int L, int R, int l, int r, int rt) {
		if (L <= l && R >= r) {
			return sum[rt];
		}
		int m = (l + r) >> 1;
		int ret = 0;
		if (L <= m)
			ret += query(L, R, l, m, rt << 1);
		if (R > m)
			ret += query(L, R, m + 1, r, rt << 1 | 1);
		return ret;
	}

	/**
	 * 单点增减
	 * 
	 * @param p
	 * @param add
	 * @param l
	 * @param r
	 * @param rt
	 */
	private static void update(int p, int add, int l, int r, int rt) {
		if (l == r) {
			sum[rt] += add;
			return;
		}
		int m = (l + r) >> 1;
		if (p <= m)
			update(p, add, l, m, rt << 1);
		else
			update(p, add, m + 1, r, rt << 1 | 1);
		pushUp(rt);
	}

	private static void toZero() {
		for (int i = 0; i < maxn; i++) {
			sum[i] = 0;
		}
	}

}
