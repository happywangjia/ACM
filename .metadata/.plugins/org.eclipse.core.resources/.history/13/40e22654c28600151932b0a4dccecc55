package tttt;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

public class MainTest {
	private static Scanner cin = new Scanner(System.in);
	private static Stack<Integer> stack = new Stack<Integer>();
	private static HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

	public static void main(String[] args) {
		init();
		int n;
		while (cin.hasNext()) {
			n = cin.nextInt();
			switch (n) {
			case 1:
				first();
				break;
			case 2:
				second();
				break;
			case 3:
				third();
				break;
			default:
				return;
			}
		}
	}

	private static void third() {
		stack.clear();
		stack.push(1);
		int tmp = 1;
		dfs3(tmp + 1);
		Iterator<Integer> iterator = stack.iterator();
		int sum = 0;
		int k1 = iterator.next();
		System.out.print(k1 + "  ");
		int k2;
		while (iterator.hasNext()) {
			k2 = iterator.next();
			System.out.print(k2 + " ");
			int t1 = k1;
			int t2 = k2;
			if (t1 > t2) {
				int yy = t1;
				t1 = t2;
				t2 = yy;
			}
			// System.out.println(t1*10+t2);
			sum += map.get(t1 * 10 + t2);
			k1 = k2;
		}
		System.out.println(sum);
	}

	private static void dfs3(int tmp) {
		if (tmp > 6)
			return;
		for (int i = 2; i <= 5; i++) {
			if (i == 2 && (!stack.contains(4) || stack.contains(3))) {
				continue;
			}
			if (stack.contains(i))
				continue;
			if (i == 3)
				continue;
			stack.push(i);
			tmp++;
			if (i == 2) {
				return;
			} else {
				dfs2(tmp);
				return;
			}
		}
	}

	private static void second() {
		stack.clear();
		stack.push(1);
		int tmp = 1;
		dfs2(tmp + 1);
		Iterator<Integer> iterator = stack.iterator();
		int sum = 0;
		int k1 = iterator.next();
		System.out.print(k1 + "  ");
		int k2;
		while (iterator.hasNext()) {
			k2 = iterator.next();
			System.out.print(k2 + " ");
			int t1 = k1;
			int t2 = k2;
			if (t1 > t2) {
				int yy = t1;
				t1 = t2;
				t2 = yy;
			}
			// System.out.println(t1*10+t2);
			sum += map.get(t1 * 10 + t2);
			k1 = k2;
		}
		System.out.println(sum);
	}

	private static void dfs2(int tmp) {
		if (tmp > 6)
			return;
		for (int i = 2; i <= 5; i++) {
			if (i == 2 && !stack.contains(4)) {
				continue;
			}
			if (stack.contains(i))
				continue;
			stack.push(i);
			tmp++;
			if (i == 2) {
				return;
			} else {
				dfs2(tmp);
				return;
			}
		}
	}

	private static void first() {
		stack.clear();
		stack.push(1);
		int tmp = 1;
		dfs1(tmp + 1);
		Iterator<Integer> iterator = stack.iterator();
		int sum = 0;
		int k1 = iterator.next();
		System.out.print(k1 + "  ");
		int k2;
		while (iterator.hasNext()) {
			k2 = iterator.next();
			System.out.print(k2 + " ");
			int t1 = k1;
			int t2 = k2;
			if (t1 > t2) {
				int yy = t1;
				t1 = t2;
				t2 = yy;
			}
			k2 = k1;
			sum += map.get(t1 * 10 + t2);
		}
		System.out.println(sum);
	}

	private static void dfs1(int tmp) {
		if (tmp > 5)
			return;
		for (int i = 2; i < 5; i++) {
			stack.push(i);
			tmp++;
			if (stack.contains(2)) {
				return;
			}
		}
	}

	private static void init() {
		map.put(12, 1165);
		map.put(13, 1942);
		map.put(14, 1511);
		map.put(15, 2129);
		map.put(23, 3179);
		map.put(24, 1462);
		map.put(25, 2677);
		map.put(34, 2677);
		map.put(35, 2216);
		map.put(45, 1811);
	}
}
