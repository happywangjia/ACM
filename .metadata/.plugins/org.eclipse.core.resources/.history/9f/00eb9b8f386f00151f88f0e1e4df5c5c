package learning.ks6;
import java.util.Scanner;
public class MatrixTest {
	public static Scanner cin = new Scanner(System.in);

	public static void main(String[] args) {
		int n;
		TSMatrix aaa = new TSMatrix();
		TSMatrix bbb = new TSMatrix();
		TSMatrix ccc = new TSMatrix();
		while (true) {
			System.out.println("0:创建矩阵：");
			System.out.println("1:A+B");
			System.out.println("2:A-B");
			System.out.println("3:A*B");
			n = cin.nextInt();
			switch (n) {
			case 0:
				aaa = createMatrix();
				bbb = createMatrix();
				break;
			case 1:
				ccc = aAddB(aaa, bbb);
				ccc.printMatrix();
				break;
			case 2:
				ccc=aJianB(aaa, bbb);
				ccc.printMatrix();
				break;
			case 3:
				ccc = aChenB(aaa, bbb);
				ccc.printMatrix();
				break;
			default:
				return;
			}
		}
	}

	private static TSMatrix aChenB(TSMatrix aaa, TSMatrix bbb) {
		if (aaa.n!=bbb.m) {
			System.out.println("输入错误：");
		}
		TSMatrix ccc=new TSMatrix(aaa.m,bbb.n);
		for(int i=0;i<aaa.len;i++){
			for(int j=0;j<bbb.len;j++){
				if(aaa.data[i].col==bbb.data[j].row){
					int kk=ccc.contain(aaa.data[i].row,bbb.data[j].col);
					if(kk==-1){
						ccc.add(aaa.data[i].row, bbb.data[j].col, aaa.data[i].e*bbb.data[i].e);
					}else{
						ccc.data[kk].e+=aaa.data[i].e*bbb.data[i].e;
					}
				}
			}
		}
		
		return ccc;
	}

	private static TSMatrix aJianB(TSMatrix aaa, TSMatrix bbb) {
		if (aaa.m != bbb.m || aaa.n != bbb.n) {
			System.out.println("矩阵错误");
			return null;
		}

		TSMatrix ccc = new TSMatrix(aaa.m, aaa.n);
		for (int i = 0; i < aaa.len; i++) {
			ccc.add(aaa.data[i].row, aaa.data[i].col, aaa.data[i].e);
		}
		for (int i = 0; i < bbb.len; i++) {
			int kk = ccc.contain(bbb.data[i].row, bbb.data[i].col);
			if (kk == -1) {
				ccc.add(bbb.data[i].row, bbb.data[i].col, bbb.data[i].e*-1);
			} else {
				ccc.data[i].e -= bbb.data[i].e;
			}

		}
		return ccc;

	}

	private static TSMatrix aAddB(TSMatrix aaa, TSMatrix bbb) {
		if (aaa.m != bbb.m || aaa.n != bbb.n) {
			System.out.println("矩阵错误");
			return null;
		}

		TSMatrix ccc = new TSMatrix(aaa.m, aaa.n);
		for (int i = 0; i < aaa.len; i++) {
			ccc.add(aaa.data[i].row, aaa.data[i].col, aaa.data[i].e);
		}
		for (int i = 0; i < bbb.len; i++) {
			int kk = ccc.contain(bbb.data[i].row, bbb.data[i].col);
			if (kk == -1) {
				ccc.add(bbb.data[i].row, bbb.data[i].col, bbb.data[i].e);
			} else {
				ccc.data[i].e += bbb.data[i].e;
			}

		}
		return ccc;
	}

	private static TSMatrix createMatrix() {
		System.out.println("输出行数m 列数n:");
		int m, n;
		m = cin.nextInt();
		n = cin.nextInt();
		TSMatrix matrix = new TSMatrix(m, n);
		int[][] arr = new int[m + 1][n + 1];
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				arr[i][j] = cin.nextInt();
				if (arr[i][j] != 0) {
					matrix.add(i, j, arr[i][j]);
				}
			}
		}
		return matrix;

	}
}

class Triple {
	int row;
	int col;
	int e;

	public Triple(int row, int col, int e) {
		this.row = row;
		this.col = col;
		this.e = e;
	}
}

class TSMatrix {
	private static final int MAXNSIZE = 50;
	Triple[] data;
	int m, n, len;

	public TSMatrix() {
		data = new Triple[MAXNSIZE];
		this.len = 0;
	}

	public TSMatrix(int m, int n) {
		data = new Triple[MAXNSIZE];
		this.m = m;
		this.n = n;
		this.len = 0;
	}

	public int contain(int row, int col) {
		for (int i = 0; i < len; i++) {
			if (data[i].row == row && data[i].col == col) {
				return i;
			}
		}
		return -1;
	}

	public void add(int row, int col, int e) {
		Triple tr = new Triple(row, col, e);
		data[len++] = tr;
	}

	public void printThree() {
		for (int i = 0; i < len; i++) {
			System.out.println(data[i].row + "	" + data[i].col + "		"
					+ data[i].e);
		}
	}

	public void printMatrix() {
		int[][] matr = new int[m + 1][n + 1];
		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				matr[i][j] = 0;
			}
		}
		for (int i = 0; i < len; i++) {
			matr[data[i].row][data[i].col] += data[i].e;
		}
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				System.out.print(matr[i][j] + " ");
			}
			System.out.println();
		}

	}

}